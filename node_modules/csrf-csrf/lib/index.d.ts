import type { CookieOptions, NextFunction, Request, Response } from "express";
import type { HttpError } from "http-errors";
export declare type SameSiteType = boolean | "lax" | "strict" | "none";
export declare type TokenRetriever = (req: Request) => string | null | undefined;
declare module "http" {
    interface IncomingHttpHeaders {
        "x-csrf-token"?: string | undefined;
    }
}
export declare type CsrfSecretRetriever = (req?: Request) => string;
export declare type DoubleCsrfConfigOptions = Partial<DoubleCsrfConfig> & {
    getSecret: CsrfSecretRetriever;
};
export declare type doubleCsrfProtection = (req: Request, res: Response, next: NextFunction) => void;
export declare type RequestMethod = "GET" | "HEAD" | "PATCH" | "PUT" | "POST" | "DELETE" | "CONNECT" | "OPTIONS" | "TRACE" | "PATCH";
export declare type CsrfIgnoredMethods = RequestMethod[];
export declare type CsrfRequestValidator = (req: Request) => boolean;
export declare type CsrfCookieSetter = (res: Response, name: string, value: string, options: CookieOptions) => void;
export declare type CsrfTokenCreator = (res: Response, req: Request) => string;
export interface DoubleCsrfConfig {
    getSecret: CsrfSecretRetriever;
    cookieName: string;
    size: number;
    cookieOptions: CookieOptions;
    ignoredMethods: CsrfIgnoredMethods;
    getTokenFromRequest: TokenRetriever;
}
export interface DoubleCsrfUtilities {
    invalidCsrfTokenError: HttpError;
    generateToken: CsrfTokenCreator;
    validateRequest: CsrfRequestValidator;
    doubleCsrfProtection: doubleCsrfProtection;
}
export declare function doubleCsrf({ getSecret, cookieName, cookieOptions: { httpOnly, sameSite, path, secure, ...remainingCOokieOptions }, size, ignoredMethods, getTokenFromRequest, }: DoubleCsrfConfigOptions): DoubleCsrfUtilities;
